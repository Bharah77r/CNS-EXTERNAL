#include<iostream>
#include<string.h>
using namespace std;

void generateKeyTable(string key,char keyTable[5][5]){
	int key_size=key.size();
	int map[26]={0};
	for(int i=0;i<key_size;i++){
		if(key[i]!='j'){
			map[key[i]-97]=2;
		}
	}
	map['j'-97]=1;
	int i=0;
	int j=0;
	for(int k=0;k<key_size;k++){
		if(map[key[k]-97]==2){
			map[key[k]-97]-=1;
			//cout<<key[k]<<" ";
			keyTable[i][j]=key[k];
			j++;
			if(j==5){
				i++;
				j=0;
			}
		}
	}
	
	for(int k=0;k<26;k++){
		if(map[k]==0){
			keyTable[i][j]=(char)(k+97);
			j++;
			if(j==5){
				i++;
				j=0;
			}
		}
	}
	
}

void search(char keyTable[5][5],char a,char b,int indices[]){
	int i,j;
	if(a=='j') a='i';
	else if(b=='j') b='i';
	for(i=0;i<5;i++){
		for(j=0;j<5;j++){
			if(keyTable[i][j]==a){
				indices[0]=i;
				indices[1]=j;
			}
			else if(keyTable[i][j]==b){
				indices[2]=i;
				indices[3]=j;
			}
		}
	}
	
}

int mod5(int a){
	return a%5;
}

void encrypt(char str[40],string key,char keyTable[5][5]){
	int ind[4];
	for(int i=0;i<strlen(str);i+=2){
		search(keyTable,str[i],str[i+1],ind);
		if(ind[0]==ind[2]){
			str[i]=keyTable[ind[0]][mod5(ind[1]+1)];
			str[i+1]=keyTable[ind[0]][mod5(ind[3]+1)];
		}
		else if(ind[1]==ind[3]){
			str[i]=keyTable[mod5(ind[0]+1)][ind[1]];
			str[i+1]=keyTable[mod5(ind[2]+1)][ind[1]];
		}
		else{
			str[i]=keyTable[ind[0]][ind[3]];
			str[i+1]=keyTable[ind[2]][ind[1]];
		}
	}
	cout<<str;

}
void decrypt(char str[], char keyTable[5][5])
{
	int ind[4];
	for(int i=0;i<strlen(str);i+=2){
		search(keyTable,str[i],str[i+1],ind);
		if(ind[0]==ind[2]){
			str[i]=keyTable[ind[0]][mod5(ind[1]+4)];
			str[i+1]=keyTable[ind[0]][mod5(ind[3]+4)];
		}
		else if(ind[1]==ind[3]){
			str[i]=keyTable[mod5(ind[0]+4)][ind[1]];
			str[i+1]=keyTable[mod5(ind[2]+4)][ind[1]];
		}
		else{
			str[i]=keyTable[ind[0]][ind[3]];
			str[i+1]=keyTable[ind[2]][ind[1]];
		}
	}
	cout<<str;		
}
int prepare(char str[], int ptrs)
{
	int cnt1=0;
	char p1[100];
	int i=0;
	while(1){
		if(i>=ptrs) break;
		p1[cnt1]=str[i];
		cnt1++;
		if(str[i]==str[i+1] && i+1<ptrs){
			
			if(str[i]=='x'){
				p1[cnt1++]='z';
			}
			else{
				p1[cnt1]='x';
				
				cnt1++;
				
			}
			i=i+1;
			continue;
		}
		p1[cnt1]=str[i+1];
		
		cnt1++;
		i+=2;
		
	}
	p1[cnt1]='\0';

	strcpy(str,p1);
	int l=strlen(str);
    if (strlen(str) % 2 != 0) {
        str[l] = 'z';
        str[l+1] = '\0';
    }
    return cnt1;
}

int main(){
	string key;
	char pt[40];
	cout<<"Enter key:";
	cin>>key;
	cout<<"Enter plain text";
	cin>>pt;
	prepare(pt,strlen(pt));
	char keyTable[5][5];
	generateKeyTable(key,keyTable);
	for(int i=0;i<5;i++){
		for(int j=0;j<5;j++){
			cout<<keyTable[i][j]<<" ";
		}
		cout<<endl;
	}
	
	encrypt(pt,key,keyTable);
	cout<<"Cipher text : "<<pt<<endl; 
	decrypt(pt,keyTable);
	cout<<"Plain text : "<<pt; 
}